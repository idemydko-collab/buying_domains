"""
Django settings for test-project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
from django.utils.translation import gettext_lazy as _
from django.urls import reverse_lazy
from core.utils import user_has_model_permission, environment_callback

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='').split(',')
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='').split(',')

# Application definition

INSTALLED_APPS = [
    "unfold",
    "unfold.contrib.filters",
    "unfold.contrib.forms",
    "unfold.contrib.inlines",
    "unfold.contrib.import_export",
    "unfold.contrib.guardian",
    "unfold.contrib.simple_history",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'django_celery_beat',
    'debug_toolbar',
    
    # Local apps
    'apps.brain',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

USE_SQLITE = config('USE_SQLITE', default=True, cast=bool)

if USE_SQLITE:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(config('DATABASE_URL'))
    }

# Celery Configuration
USE_CELERY = config('USE_CELERY', default=False, cast=bool)

if USE_CELERY:
    CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
    CELERY_TIMEZONE = config('CELERY_TIMEZONE', default='UTC')
    CELERY_TASK_TRACK_STARTED = config('CELERY_TASK_TRACK_STARTED', default=True, cast=bool)
    CELERY_TASK_TIME_LIMIT = config('CELERY_TASK_TIME_LIMIT', default=3600, cast=int)
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Debug Toolbar Configuration
if DEBUG:
    INTERNAL_IPS = [
        "127.0.0.1",
        "localhost",
    ]

# BetterStack logging
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": True,
#     'handlers': {
#         'logtail': {
#             'class': 'logtail.LogtailHandler',
#             'source_token': config('LOGTAIL_SOURCE_TOKEN', default=''),
#             'host': config('LOGTAIL_HOST', default='')
#         },
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["logtail", "console"] if DEBUG else ["logtail"],
#             "level": "INFO",
#         },
#         "root": {
#             "handlers": ["logtail", "console"] if DEBUG else ["logtail"],
#             "level": "DEBUG",
#         },
#         'celery': {
#             "handlers": ["logtail", "console"] if DEBUG else ["logtail"],
#             "level": "DEBUG",
#         },
#         'apps': {
#             "handlers": ["logtail", "console"] if DEBUG else ["logtail"],
#             "level": "DEBUG",
#         },
#     },
# }

# Unfold Admin Configuration
UNFOLD = {
    "SITE_TITLE": "Test Project Admin",
    "SITE_HEADER": "Test Project Admin",
    "SITE_URL": "/",
    "SITE_SYMBOL": "rocket",  # Material icon from https://fonts.google.com/icons
    "ENVIRONMENT": "core.utils.environment_callback",
    "STYLES": [],
    "SCRIPTS": [],
    "SIDEBAR": {
        "navigation": [
            {
                "title": _("Navigation"),
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",
                        "link": lambda request: reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_authenticated,
                    },
                    {
                        "title": _("Brain App"),
                        "icon": "psychology",
                        "link": lambda request: reverse_lazy("admin:brain_examplemodel_changelist"),
                        "permission": lambda request: user_has_model_permission(
                            request.user, "brain", "examplemodel", perm_types=("view",)
                        ),
                    },
                ],
            },
            {
                "separator": True,
                "title": _("Authentication"),
                "items": [
                    {
                        "title": _("Users"),
                        "icon": "person",
                        "link": lambda request: reverse_lazy("admin:auth_user_changelist"),
                        "permission": lambda request: user_has_model_permission(
                            request.user, "auth", "user", perm_types=("view",)
                        ),
                    },
                    {
                        "title": _("Groups"),
                        "icon": "group",
                        "link": lambda request: reverse_lazy("admin:auth_group_changelist"),
                        "permission": lambda request: user_has_model_permission(
                            request.user, "auth", "group", perm_types=("view",)
                        ),
                    },
                ],
            },
            {
                "separator": True,
                "title": _("Task Management"),
                "items": [
                    {
                        "title": _("Periodic Tasks"),
                        "icon": "schedule",
                        "link": lambda request: reverse_lazy("admin:django_celery_beat_periodictask_changelist"),
                        "permission": lambda request: user_has_model_permission(
                            request.user, "django_celery_beat", "periodictask", perm_types=("view",)
                        ),
                    },
                ],
            },
        ],
    },
    "TABS": [
        {
            "models": [
                "django_celery_beat.periodictask",
                "django_celery_beat.intervalschedule",
                "django_celery_beat.crontabschedule",
                "django_celery_beat.solarschedule",
                "django_celery_beat.clockedschedule",
            ],
            "items": [
                {
                    "title": _("Periodic Tasks"),
                    "link": lambda request: reverse_lazy("admin:django_celery_beat_periodictask_changelist"),
                    "permission": lambda request: user_has_model_permission(
                        request.user, "django_celery_beat", "periodictask", perm_types=("view",)
                    ),
                },
                {
                    "title": _("Intervals"),
                    "link": lambda request: reverse_lazy("admin:django_celery_beat_intervalschedule_changelist"),
                    "permission": lambda request: user_has_model_permission(
                        request.user, "django_celery_beat", "intervalschedule", perm_types=("view",)
                    ),
                },
                {
                    "title": _("Crontabs"),
                    "link": lambda request: reverse_lazy("admin:django_celery_beat_crontabschedule_changelist"),
                    "permission": lambda request: user_has_model_permission(
                        request.user, "django_celery_beat", "crontabschedule", perm_types=("view",)
                    ),
                },
                {
                    "title": _("Solar Events"),
                    "link": lambda request: reverse_lazy("admin:django_celery_beat_solarschedule_changelist"),
                    "permission": lambda request: user_has_model_permission(
                        request.user, "django_celery_beat", "solarschedule", perm_types=("view",)
                    ),
                },
                {
                    "title": _("Clocked"),
                    "link": lambda request: reverse_lazy("admin:django_celery_beat_clockedschedule_changelist"),
                    "permission": lambda request: user_has_model_permission(
                        request.user, "django_celery_beat", "clockedschedule", perm_types=("view",)
                    ),
                },
            ],
        },
    ],
}